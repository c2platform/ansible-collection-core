---
- name: Unarchive
  ansible.builtin.unarchive:
    src: "{{ item['src'] }}"
    dest: "{{ item['dest'] }}"
    remote_src: "{{ item['remote_src']|default(omit) }}"
    creates: "{{ item['creates']|default(omit) }}"
    exclude: "{{ item['exclude']|default(omit) }}"
    include: "{{ item['include']|default(omit) }}"
    extra_opts: "{{ item['extra_opts']|default(omit) }}"
    group: "{{ item['group']|default(omit) }}"
    owner: "{{ item['owner']|default(omit) }}"
    mode: "{{ item['mode']|default(omit) }}"
    validate_certs: "{{ item['validate_certs']|default(omit) }}"
    state: "{{ item['state']|default(omit) }}"
  with_items: "{{ common_unarchive_set }}"
  loop_control:
    label: "{{ item['src'] }} â†’ {{ item['dest'] }}"
  notify: "{{ item['notify']|default(omit) }}"

- name: Shell ( after unarchive )  # noqa command-instead-of-shell
  ansible.builtin.shell:
    chdir: "{{ item['chdir']|default(omit) }}"
    cmd: "{{ item['cmd'] }}"
    creates: "{{ item['creates']|default(omit) }}"
    executable: "{{ item['executable']|default(omit) }}"
    removes: "{{ item['removes']|default(omit) }}"
    stdin: "{{ item['stdin']|default(omit) }}"
    stdin_add_newline: "{{ item['stdin_add_newline']|default(omit) }}"
    warn: "{{ item['warn']|default(omit) }}"
  register: _shell_after_unarchive
  with_items: "{{ common_unarchive_set|selectattr('shell', 'defined')|map(attribute='shell')|list }}"
  ignore_errors: "{{ item['ignore_errors']|default(omit) }}"
  loop_control:
    label: "{{ common_unarchive_set_item }}"
  notify: "{{ item['notify']|default(omit) }}"

- name: Log shell results
  copy:  # debug
    content: "{{ {'_shell_after_unarchive': _shell_after_unarchive }|to_nice_yaml }}"
    dest: "/tmp/{{ common_unarchive_set_item }}_{{ ansible_date_time.iso8601_basic }}.yml"
    mode: 0644
  when: _shell_after_unarchive.failed|default(False)
