---
- block:
  - stat:
      path: "{{ cacerts2_ca_domain['key'] }}"
    register: ca_key

  - stat:
      path: "{{ cacerts2_ca_domain['crt'] }}"
    register: ca_crt

  - stat:
      path: "{{ cacerts2_certificate['dir'] }}"
    register: _cacerts2_certificate_dir

  - name: Create dir for key, crt etc  # e.g. /vagrant/.ca/c2d/c2d/apache
    file:
      path: "{{ cacerts2_certificate['dir'] }}"
      state: directory
      mode: 0755
      recurse: yes
    when: not _cacerts2_certificate_dir.stat.exists

  - name: Generate an OpenSSL private key  # with the default values (4096 bits, RSA)
    community.crypto.openssl_privatekey:
      path: "{{ cacerts2_certificate['create']['key'] }}"
      force: "{{ cacerts2_certificate['force']|default(False) }}"
      passphrase: "{{ cacerts2_certificate['passphrase']|default(omit) }}"
      cipher: "{{ cacerts2_certificate['cipher']|default(omit) }}"
    register: cert_key

  - name: Generate an OpenSSL Certificate Signing Request
    community.crypto.openssl_csr:
      path: "{{ cacerts2_certificate['create']['csr'] }}"
      privatekey_path: "{{ cert_key.filename }}"
      privatekey_passphrase: "{{ cacerts2_certificate['passphrase']|default(omit) }}"
      key_usage:
        - digitalSignature
        - keyAgreement
      extended_key_usage:
        - clientAuth
        - serverAuth
      common_name: "{{ cacerts2_certificate['common_name'] }}"
      subject_alt_name: "{{ cacerts2_certificate['subject_alt_name']|default(omit) }}"
      force: "{{ cacerts2_certificate['force']|default(False) }}"
    register: cert_csr

  - name: Generate an OpenSSL certificate
    community.crypto.x509_certificate:
      path: "{{ cacerts2_certificate['create']['crt'] }}"
      privatekey_path: "{{ cert_key.filename }}"
      privatekey_passphrase: "{{ cacerts2_certificate['passphrase']|default(omit) }}"
      csr_path: "{{ cert_csr.filename }}"
      ownca_path: "{{ ca_crt.stat.path }}"
      ownca_privatekey_path: "{{ ca_key.stat.path }}"
      ownca_privatekey_passphrase: "{{ cacerts2_ca_domain['passphrase']|default(omit) }}"
      provider: ownca
      # ternary('ownca','selfsigned') is wel handig TODO
      force: "{{ cacerts2_certificate['force']|default(False) }}"
    register: cert_crt

  - name: Generate pkcs12 file
    community.crypto.openssl_pkcs12:
      action: export
      path: "{{ cacerts2_certificate['create']['p12'] }}"
      friendly_name: "{{ cacerts2_certificate['common_name'] }}"
      privatekey_path: "{{ cert_key.filename }}"
      privatekey_passphrase: "{{ cacerts2_certificate['passphrase']|default(omit) }}"
      certificate_path: "{{ cert_crt.filename }}"
      # was called 'ca_cerficates' before 2.8
      other_certificates: "{{ ca_crt.stat.path | default(omit) }}"
      force: "{{ cacerts2_certificate['force']|default(False) }}"
      state: present
    when: cacerts2_certificate['create']['p12'] is defined
    register: cert_p12

  - name: Create PEM file
    shell:
      cmd: >
        cat {{ cert_key.filename }} {{ cert_crt.filename }} >
        {{ cacerts2_certificate['create']['pem'] }}
    changed_when: cert_crt.changed or cert_crt.changed
    when: cacerts2_certificate['create']['pem'] is defined
  delegate_to: "{{ cacerts2_ca_server }}"
  delegate_facts: yes
